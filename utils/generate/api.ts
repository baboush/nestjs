// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Mon API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from 'url';
import * as isomorphicFetch from 'isomorphic-fetch';
import { Configuration } from './configuration';

const BASE_PATH = '/'.replace(/\/+$/, '');

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|',
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = isomorphicFetch,
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name = 'RequiredError';
  constructor(
    public field: string,
    msg?: string,
  ) {
    super(msg);
  }
}

/**
 *
 * @export
 * @interface CreateMessageDtoImplement
 */
export interface CreateMessageDtoImplement {
  /**
   *
   * @type {string}
   * @memberof CreateMessageDtoImplement
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateMessageDtoImplement
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof CreateMessageDtoImplement
   */
  content: string;
}
/**
 *
 * @export
 * @interface Message
 */
export interface Message {
  /**
   *
   * @type {number}
   * @memberof Message
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof Message
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Message
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof Message
   */
  content: string;
  /**
   *
   * @type {Date}
   * @memberof Message
   */
  createAt: Date;
}
/**
 * MessageApi - fetch parameter creator
 * @export
 */
export const MessageApiFetchParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Create Message
     * @param {CreateMessageDtoImplement} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messageControllerCreate(
      body: CreateMessageDtoImplement,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling messageControllerCreate.',
        );
      }
      const localVarPath = `/message`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      localVarUrlObj.search = null;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'CreateMessageDtoImplement' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MessageApi - functional programming interface
 * @export
 */
export const MessageApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create Message
     * @param {CreateMessageDtoImplement} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messageControllerCreate(
      body: CreateMessageDtoImplement,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Message>> {
      const localVarFetchArgs = MessageApiFetchParamCreator(
        configuration,
      ).messageControllerCreate(body, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * MessageApi - factory interface
 * @export
 */
export const MessageApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string,
) {
  return {
    /**
     *
     * @summary Create Message
     * @param {CreateMessageDtoImplement} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messageControllerCreate(body: CreateMessageDtoImplement, options?: any) {
      return MessageApiFp(configuration).messageControllerCreate(body, options)(
        fetch,
        basePath,
      );
    },
  };
};

/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export class MessageApi extends BaseAPI {
  /**
   *
   * @summary Create Message
   * @param {CreateMessageDtoImplement} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public messageControllerCreate(
    body: CreateMessageDtoImplement,
    options?: any,
  ) {
    return MessageApiFp(this.configuration).messageControllerCreate(
      body,
      options,
    )(this.fetch, this.basePath);
  }
}
